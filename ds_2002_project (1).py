# -*- coding: utf-8 -*-
"""DS 2002 Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ISsncwBbc5830l5DDm_uaIZiPHDtYE2Z

# 1. Data Ingestion

**Source 1: CSV with players.csv**
"""

import pandas as pd

# Source 1 (Local CSV)
try:
  players_df = pd.read_csv('players.csv')
  print("CSV successfully loaded")
except FileNotFoundError:
    print("Error: The file was not found.")
except csv.Error as e:
    print(f"Error reading CSV file: {e}")
except Exception as e:
     print(f"An unexpected error occurred: {e}")

"""**Source 2: Kaggle API through transfers.csv**"""

# Source 2: Access data through Kaggle API
import os
import kagglehub
from kagglehub import KaggleDatasetAdapter

# Set your Kaggle credentials (username and key)
os.environ["KAGGLE_USERNAME"] = "nateassefa"
os.environ["KAGGLE_KEY"] = "0b13a555650cc66cefe976172a0cf785"

try:
    # Set the path to the file you'd like to load
  file_path = "transfers.csv"

  # Load the latest version
  transfers_df = kagglehub.load_dataset(
    KaggleDatasetAdapter.PANDAS,
    "davidcariboo/player-scores",
    file_path)
  print(transfers_df.head())

except FileNotFoundError:
    print("Error: The file 'transfers.csv' was not found in the dataset.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""# 2. Data Transformation"""

output = input("Choose an output file format. The original format is csv.")

import sqlite3

try:
  if output == 'JSON':
    transfers_df.to_json('transfers.json')
    players_df.to_json('players.json')
    print(f"Files converted successfully to {output}")
  elif output == 'Excel':
    transfers_df.to_excel('transfers.xlsx')
    players_df.to_excel('players.xlsx')
    print(f"Files converted successfully to {output}")
  elif output == 'SQL':
    transfers_db = 'transfersdb'
    players_db = 'playersdb'
    conn = sqlite3.connect(transfers_db)
    conn2 = sqlite3.connect(players_db)
    table_name_transfers = 'transfers'
    table_name_players = 'players'
    transfers_df.to_sql('transfers.csv', conn, if_exists='replace', index = False)
    players_df.to_sql('players.csv', conn2, if_exists='replace', index = False)
    conn.close()
    print(f"Files converted successfully to {output}")

except FileNotFoundError:
    print("Error: At least one of the files was not found. You used either an invalid file format or the wrong file(s).")

# # Removing from_club_id and to_club_id columns from the transfers
transfers_df = transfers_df.drop(columns=["from_club_id", "to_club_id"])

# Adding new column to show value of transfer by comparing the player's valuation to their transfer fee
transfers_df['transfer_fee_vs_market_value'] = transfers_df['transfer_fee'] - transfers_df['market_value_in_eur']
transfers_df

"""**Data Merging and Analysis**"""

# Merge the two dataframes on the player id column
merged_df = pd.merge(transfers_df, players_df, on="player_id", how = "left")

# Drop duplicate market value column
merged_df.drop("market_value_in_eur_y", inplace = True, axis = 'columns')

# Rename the existing market value column to remove the 'x' subscript
merged_df.rename(columns={'market_value_in_eur_x': 'market_value_in_eur'}, inplace=True)
merged_df.head()

"""**Analysing and Plotting the Market Value vs Transfer Fee Correlation**"""

# Plotting the market value vs transfer fee.

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Drop rows with missing values in key columns
corr_df = merged_df.dropna(subset=["market_value_in_eur", "transfer_fee"]).copy()

# Convert to numeric and scale to euros if values are in millions
corr_df["market_value_in_eur"] = pd.to_numeric(corr_df["market_value_in_eur"], errors="coerce") * 1_000_000
corr_df["transfer_fee"] = pd.to_numeric(corr_df["transfer_fee"], errors="coerce") * 1_000_000

# Plot
plt.figure(figsize=(10, 6))
sns.scatterplot(data=corr_df, x="market_value_in_eur", y="transfer_fee")

# Format both axes in millions
formatter = FuncFormatter(lambda x, _: f'€{x/1_000_000_000_000:.0f}M')
plt.gca().xaxis.set_major_formatter(formatter)
plt.gca().yaxis.set_major_formatter(formatter)

plt.title("Market Value vs Transfer Fee")
plt.xlabel("Market Value (€M)")
plt.ylabel("Transfer Fee (€M)")
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Analysing and Plotting the correlation b/w nationality and transfer fee**"""

import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# Clean transfer_fee column first
merged_df["transfer_fee"] = pd.to_numeric(merged_df["transfer_fee"], errors="coerce")

# Group by nationality (country_of_citizenship)
avg_by_nationality = merged_df.groupby("country_of_citizenship")["transfer_fee"].mean().dropna()

# Sort and take top 10
avg_by_nationality_sorted = avg_by_nationality.sort_values(ascending=False).head(10)

# Plot
plt.figure(figsize=(10, 6))
avg_by_nationality_sorted.plot(kind="barh", color="skyblue")

# Format x-axis in millions
formatter = FuncFormatter(lambda x, _: f'€{x/1_000_000:.1f}M')
plt.gca().xaxis.set_major_formatter(formatter)

plt.title("Top 10 Nationalities by Average Transfer Fee")
plt.xlabel("Average Transfer Fee (€M)")
plt.ylabel("Country of Citizenship")
plt.gca().invert_yaxis()  # Highest at top
plt.grid(True, axis='x')
plt.tight_layout()
plt.show()

"""**Analyzing and Plotting the Average Transfer Fee by age to find potential correlations/trends**"""

# First, we are going to add an age column because we are going to try to find the correlation between age and transfer fee

# Make sure the date_of_birth column is in datetime format
merged_df["date_of_birth"] = pd.to_datetime(merged_df["date_of_birth"], errors='coerce')

# Get today's date
today = pd.to_datetime('today')

# Calculate age
merged_df["age"] = (today - merged_df["date_of_birth"]).dt.days // 365

# View result
merged_df.head()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter

# Ensure transfer_fee is numeric
merged_df["transfer_fee"] = pd.to_numeric(merged_df["transfer_fee"], errors="coerce")

# Drop rows with missing values
plot_df = merged_df.dropna(subset=["age", "transfer_fee"]).copy()

# Group by age and calculate average transfer fee
avg_fee_by_age = plot_df.groupby("age")["transfer_fee"].mean().reset_index()

# Plot
plt.figure(figsize=(11, 5))
sns.lineplot(data=avg_fee_by_age, x="age", y="transfer_fee", marker="o")

# Format y-axis in millions
plt.gca().yaxis.set_major_formatter(FuncFormatter(lambda x, _: f'€{x/1_000_000:.1f}M'))

# Set y-axis range
plt.ylim(0, avg_fee_by_age["transfer_fee"].max() * 1.05)

plt.title("Average Transfer Fee by Age")
plt.xlabel("Player Age")
plt.ylabel("Average Transfer Fee (€M)")
plt.grid(True)
plt.tight_layout()
plt.show()

"""# 3. Data Storage"""

import sqlite3
# Create the database connection
merged_df_conn = sqlite3.connect("merged_df.db")
merged_df.to_sql("merged_df", merged_df_conn, if_exists="replace", index=False)

# Ensure that the df was added to sql succesfully.
result = pd.read_sql_query("SELECT * FROM merged_df", merged_df_conn)
result.head()

"""# 4. Data Summarization"""

# Printing a summary of the ingested data

print("Ingested transfers.csv:")
print(f"Records: {transfers_df.shape[0]}")
print(f"Columns: {transfers_df.shape[1]}\n")

print("Ingested players.csv:")
print(f"Records: {players_df.shape[0]}")
print(f"Columns: {players_df.shape[1]}\n")

# Printing a summary of the transformed data

print("After merging & cleaning:")
print(f"Records: {merged_df.shape[0]}")
print(f"Columns: {merged_df.shape[1]}\n")

